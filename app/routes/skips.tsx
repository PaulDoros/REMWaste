import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate, useSearchParams, Link } from 'react-router';
import { motion, AnimatePresence } from 'framer-motion';
import { skips } from '../constants/skips';
import { useSkipContext } from '../context/SkipContext';
import SkipCard from '../components/SkipCard';
import ProgressIndicator from '../components/ProgressIndicator';
import ThemeToggle from '../components/ThemeToggle';
import ChatAssistant from '../components/ChatAssistant';
import { Button } from '../components/ui/moving-border';
import { GradientButton } from '../components/ui/gradient-button';
import SparklesHeader from '../components/SparklesHeader';
import { SparklesPreview } from '~/components/ui/sparkles-demo';
import { SparklesCore } from '~/components/ui/sparkles';

// FilterAccordion component for mobile-friendly filters
interface FilterAccordionProps {
  title: string;
  children: React.ReactNode;
  defaultOpen?: boolean;
  icon?: React.ReactNode;
}

const FilterAccordion: React.FC<FilterAccordionProps> = ({
  title,
  children,
  defaultOpen = false,
  icon,
}) => {
  const [isOpen, setIsOpen] = useState(defaultOpen);

  return (
    <div className="border border-border rounded-md overflow-hidden">
      <button
        className="w-full px-4 py-3 flex justify-between items-center bg-background/50 hover:bg-background/80 transition-colors"
        onClick={() => setIsOpen(!isOpen)}
      >
        <div className="flex items-center gap-2">
          {icon && <span className="text-primary">{icon}</span>}
          <span className="text-sm font-medium">{title}</span>
        </div>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
          className={`transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}
        >
          <polyline points="6 9 12 15 18 9"></polyline>
        </svg>
      </button>
      <AnimatePresence initial={false}>
        {isOpen && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="overflow-hidden"
          >
            <div className="px-4 pb-3">{children}</div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

// Define steps for the progress indicator
const STEPS = [
  { id: 'postcode', label: 'Postcode', isCompleted: true },
  { id: 'waste-type', label: 'Waste Type', isCompleted: true },
  { id: 'select-skip', label: 'Select Skip', isActive: true },
  { id: 'permit-check', label: 'Permit Check' },
  { id: 'choose-date', label: 'Choose Date' },
  { id: 'payment', label: 'Payment' },
];

// Sort and filter options
const SORT_OPTIONS = [
  { id: 'size', label: 'Size (small to large)' },
  { id: 'size-desc', label: 'Size (large to small)' },
  { id: 'price', label: 'Price (low to high)' },
  { id: 'price-desc', label: 'Price (high to low)' },
];

// This type mimics what would normally be generated by Route types
type ComponentProps = {
  params: {};
};

export default function Component({ params }: ComponentProps) {
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();
  const { selectedSkip, setSelectedSkip } = useSkipContext();

  // Get filter/sort values from URL params or defaults
  const [sortBy, setSortBy] = useState(searchParams.get('sort') || 'size');
  const [filterHeavyWaste, setFilterHeavyWaste] = useState(
    searchParams.get('heavyWaste') === 'true'
  );
  const [filterOnRoad, setFilterOnRoad] = useState(searchParams.get('onRoad') === 'true');

  // Mobile filter drawer state
  const [isFilterOpen, setIsFilterOpen] = useState(false);

  // Comparison feature states
  const [showCompare, setShowCompare] = useState(false);
  const [skipsToCompare, setSkipsToCompare] = useState<number[]>([]);
  const [isComparisonModalOpen, setIsComparisonModalOpen] = useState(false);

  // Comparison functions
  const toggleSkipComparison = (skipId: number) => {
    if (skipsToCompare.includes(skipId)) {
      removeSkipFromComparison(skipId);
    } else {
      if (skipsToCompare.length < 3) {
        // Limit to 3 skips for comparison
        setSkipsToCompare([...skipsToCompare, skipId]);
      }
    }
  };

  const removeSkipFromComparison = (skipId: number) => {
    setSkipsToCompare(skipsToCompare.filter(id => id !== skipId));
  };

  const openComparisonModal = () => {
    if (skipsToCompare.length >= 2) {
      setIsComparisonModalOpen(true);
    }
  };

  const closeComparisonModal = () => {
    setIsComparisonModalOpen(false);
  };

  // Update URL when filters change
  useEffect(() => {
    const newParams = new URLSearchParams();

    if (sortBy) newParams.set('sort', sortBy);
    if (filterHeavyWaste) newParams.set('heavyWaste', 'true');
    if (filterOnRoad) newParams.set('onRoad', 'true');

    setSearchParams(newParams, { replace: true });
  }, [sortBy, filterHeavyWaste, filterOnRoad, setSearchParams]);

  // Apply filters and sorting
  const filteredSkips = skips
    .filter(skip => {
      if (filterHeavyWaste && !skip.allows_heavy_waste) return false;
      if (filterOnRoad && !skip.allowed_on_road) return false;
      return true;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'size':
          return a.size - b.size;
        case 'size-desc':
          return b.size - a.size;
        case 'price':
          return a.price_before_vat - b.price_before_vat;
        case 'price-desc':
          return b.price_before_vat - a.price_before_vat;
        default:
          return a.size - b.size;
      }
    });

  const handleProceed = () => {
    if (selectedSkip) {
      navigate('/confirm');
    }
  };

  const resetFilters = () => {
    setSortBy('size');
    setFilterHeavyWaste(false);
    setFilterOnRoad(false);
    setIsFilterOpen(false);
    setShowCompare(false);
    setSkipsToCompare([]);
  };

  return (
    <div className="min-h-screen bg-background text-foreground relative" data-author="Paul Doros">
      {/* Subtle sparkles effect at the top */}
      <SparklesHeader
        particleColor="var(--primary)"
        height="h-[120px]"
        particleDensity={20}
        minSize={0.2}
        maxSize={0.8}
        speed={0.5}
      />

      {/* Progress indicator with adjusted position to not overlap with theme toggle */}
      <div className="pt-8 md:pt-10 px-2 sm:px-4 relative z-40">
        <ProgressIndicator steps={STEPS} />
      </div>

      {/* Page content */}
      <div className="container mx-auto px-3 sm:px-4 pt-0 pb-24 relative z-30">
        {/* Title and sparkles section */}
        <div className="relative mb-8 sm:mb-12 w-full flex flex-col items-center justify-center overflow-hidden rounded-md">
          <div className="w-full h-40 relative mx-auto">
            {/* Gradients */}
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-indigo-500 to-transparent h-[2px] w-3/4 blur-sm" />
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-indigo-500 to-transparent h-px w-3/4" />
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-sky-500 to-transparent h-[5px] w-1/4 blur-sm" />
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-sky-500 to-transparent h-px w-1/4" />
            <motion.h1
              className="absolute left-1/2 -translate-x-1/2 top-0 text-2xl sm:text-3xl font-bold mb-3 text-center mt-4 w-full"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              Choose Your Skip Size
            </motion.h1>

            <p className="absolute left-1/2 -translate-x-1/2 top-16 sm:top-20 text-muted-foreground text-center mb-5 w-full px-4 text-sm sm:text-base">
              Select the skip size that best suits your needs from our wide selection.
            </p>
            {/* Core component */}
            {useMemo(
              () => (
                <SparklesCore
                  background="transparent"
                  minSize={0.4}
                  maxSize={1}
                  particleDensity={1200}
                  className="w-full h-full pointer-events-none"
                  particleColor="#FFFFFF"
                />
              ),
              []
            )}

            {/* Radial Gradient to prevent sharp edges */}
            <div className="absolute inset-0 w-full h-full bg-background [mask-image:radial-gradient(800px_200px_at_top,transparent_20%,white)]"></div>
          </div>
        </div>

        {/* Mobile filter toggle and current filter indicators */}
        <div className="md:hidden flex items-center justify-between mb-4">
          <motion.button
            className="flex items-center space-x-2 bg-primary/10 hover:bg-primary/20 text-primary px-3 py-2 rounded-md transition-colors"
            onClick={() => setIsFilterOpen(!isFilterOpen)}
            whileTap={{ scale: 0.97 }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M22 3H2l8 9.46V19l4 2v-8.54L22 3z" />
            </svg>
            <span>Filters</span>
          </motion.button>

          <div className="flex space-x-2">
            {filterHeavyWaste && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                className="text-xs bg-primary/10 text-primary px-2 py-1 rounded-full"
              >
                Heavy Waste
              </motion.div>
            )}

            {filterOnRoad && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                className="text-xs bg-primary/10 text-primary px-2 py-1 rounded-full"
              >
                Road Only
              </motion.div>
            )}

            {(filterHeavyWaste || filterOnRoad) && (
              <button
                onClick={resetFilters}
                className="text-xs text-muted-foreground hover:text-foreground"
              >
                ✕
              </button>
            )}
          </div>
        </div>

        {/* Filter and sort controls */}
        <motion.div
          className={`${
            isFilterOpen ? 'block' : 'hidden md:block'
          } mb-6 bg-card text-card-foreground p-4 rounded-lg border border-border shadow-sm relative z-40`}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.3 }}
        >
          <div className="flex flex-col gap-4">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium">Filter & Sort</h3>
              {isFilterOpen && (
                <button
                  onClick={() => setIsFilterOpen(false)}
                  className="text-muted-foreground hover:text-foreground"
                >
                  ✕
                </button>
              )}
            </div>

            {/* Accordions for mobile */}
            <div className="space-y-3">
              {/* Sort Accordion */}
              <FilterAccordion
                title="Sort Options"
                defaultOpen={true}
                icon={
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="m3 16 4 4 4-4" />
                    <path d="M7 20V4" />
                    <path d="m21 8-4-4-4 4" />
                    <path d="M17 4v16" />
                  </svg>
                }
              >
                <div className="pt-2 pb-1">
                  <select
                    value={sortBy}
                    onChange={e => setSortBy(e.target.value)}
                    className="w-full bg-background text-foreground rounded-md border border-border px-3 py-2 text-sm focus:ring-2 focus:ring-primary/30 focus:border-primary transition-all"
                  >
                    {SORT_OPTIONS.map(option => (
                      <option key={option.id} value={option.id}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                </div>
              </FilterAccordion>

              {/* Features Accordion */}
              <FilterAccordion
                title="Features"
                defaultOpen={true}
                icon={
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
                    <circle cx="12" cy="12" r="3" />
                  </svg>
                }
              >
                <div className="space-y-3 pt-2 pb-1">
                  <label className="flex items-center gap-2 cursor-pointer group">
                    <div className="relative flex items-center">
                      <input
                        type="checkbox"
                        id="heavyWaste"
                        checked={filterHeavyWaste}
                        onChange={e => setFilterHeavyWaste(e.target.checked)}
                        className="rounded-sm w-4 h-4 bg-background border-border text-primary focus:ring-primary"
                      />
                      <div className="absolute inset-0 rounded-sm group-hover:bg-primary/10 transition-colors opacity-0 group-hover:opacity-100 pointer-events-none"></div>
                    </div>
                    <span className="text-sm group-hover:text-primary transition-colors">
                      Allows Heavy Waste
                    </span>
                  </label>

                  <label className="flex items-center gap-2 cursor-pointer group">
                    <div className="relative flex items-center">
                      <input
                        type="checkbox"
                        id="onRoad"
                        checked={filterOnRoad}
                        onChange={e => setFilterOnRoad(e.target.checked)}
                        className="rounded-sm w-4 h-4 bg-background border-border text-primary focus:ring-primary"
                      />
                      <div className="absolute inset-0 rounded-sm group-hover:bg-primary/10 transition-colors opacity-0 group-hover:opacity-100 pointer-events-none"></div>
                    </div>
                    <span className="text-sm group-hover:text-primary transition-colors">
                      Road Placement Only
                    </span>
                  </label>
                </div>
              </FilterAccordion>

              {/* Compare Feature Accordion */}
              <FilterAccordion
                title="Compare Skips"
                defaultOpen={false}
                icon={
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="M16 3h5v5" />
                    <path d="M8 3H3v5" />
                    <path d="M21 13v5a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5" />
                    <path d="m21 8-5-5-5 5" />
                    <path d="M3 16l5 5 5-5" />
                  </svg>
                }
              >
                <div className="pt-2 pb-1">
                  <div className="text-sm text-muted-foreground mb-2">
                    Select skips to compare their features side by side.
                  </div>

                  <button
                    onClick={() => setShowCompare(!showCompare)}
                    className={`w-full py-2 px-3 text-sm font-medium rounded-md transition-colors relative ${
                      showCompare
                        ? 'bg-primary text-primary-foreground comparison-mode-active'
                        : 'bg-primary/10 text-primary hover:bg-primary/20'
                    }`}
                  >
                    {showCompare ? 'Hide Comparison' : 'Enable Comparison Mode'}
                    {skipsToCompare.length > 0 && (
                      <span className="comparison-badge">{skipsToCompare.length}</span>
                    )}
                  </button>

                  {skipsToCompare.length > 0 && (
                    <div className="mt-3">
                      <div className="text-xs text-muted-foreground mb-1">
                        Selected for comparison ({skipsToCompare.length}/3):
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {skipsToCompare.map(skipId => {
                          const skip = skips.find(s => s.id === skipId);
                          return skip ? (
                            <div
                              key={skipId}
                              className="bg-background text-xs px-2 py-1 rounded-full border border-border flex items-center gap-1"
                            >
                              {skip.size}yd
                              <button
                                onClick={() => removeSkipFromComparison(skipId)}
                                className="text-muted-foreground hover:text-foreground"
                              >
                                ✕
                              </button>
                            </div>
                          ) : null;
                        })}
                      </div>

                      {skipsToCompare.length >= 2 && (
                        <button
                          onClick={openComparisonModal}
                          className="mt-3 w-full py-2 px-3 text-xs font-medium bg-primary/10 text-primary hover:bg-primary/20 rounded-md transition-colors flex items-center justify-center gap-1"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="14"
                            height="14"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                          >
                            <rect x="8" y="2" width="8" height="4" rx="1" ry="1" />
                            <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" />
                            <path d="M12 11h4" />
                            <path d="M12 16h4" />
                            <path d="M8 11h.01" />
                            <path d="M8 16h.01" />
                          </svg>
                          View Detailed Comparison
                        </button>
                      )}
                    </div>
                  )}
                </div>
              </FilterAccordion>
            </div>

            {/* Reset button */}
            <div className="flex justify-end">
              <button
                onClick={resetFilters}
                className="px-4 py-2 text-sm font-medium text-primary hover:text-primary/80 hover:bg-primary/10 rounded-md transition-colors flex items-center space-x-2"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="14"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
                  <path d="M3 3v5h5" />
                </svg>
                <span>Reset All</span>
              </button>
            </div>
          </div>
        </motion.div>

        {/* No results message */}
        {filteredSkips.length === 0 && (
          <motion.div
            className="bg-card border border-border rounded-lg p-6 text-center my-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <svg
              className="w-12 h-12 mx-auto text-muted-foreground mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={1.5}
                d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M12 20h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            <h3 className="text-lg font-semibold mb-2">No Matching Skips</h3>
            <p className="text-muted-foreground mb-4">
              Try adjusting your filters to see more options.
            </p>
            <button
              onClick={resetFilters}
              className="px-4 py-2 bg-primary/10 hover:bg-primary/20 text-primary rounded-md transition-colors"
            >
              Reset Filters
            </button>
          </motion.div>
        )}

        {/* Skip cards grid */}
        <motion.div
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {filteredSkips.map(skip => (
            <div
              key={skip.id}
              className={`rounded-lg shadow-sm border border-background overflow-hidden `}
            >
              {showCompare && (
                <button
                  onClick={() => toggleSkipComparison(skip.id)}
                  className={`absolute top-2 right-2 z-30 w-6 h-6 rounded-full flex items-center justify-center transition-colors ${
                    skipsToCompare.includes(skip.id)
                      ? 'bg-primary text-primary-foreground'
                      : 'bg-background/80 backdrop-blur-sm text-foreground border border-border hover:bg-background'
                  } comparison-trigger`}
                >
                  {skipsToCompare.includes(skip.id) ? '✓' : '+'}
                  <div className="comparison-tooltip">
                    {skipsToCompare.includes(skip.id)
                      ? 'Remove from comparison'
                      : skipsToCompare.length < 3
                        ? 'Add to comparison'
                        : 'Maximum 3 skips'}
                  </div>
                </button>
              )}
              <SkipCard
                skip={skip}
                isSelected={selectedSkip?.id === skip.id}
                onSelect={() =>
                  showCompare ? toggleSkipComparison(skip.id) : setSelectedSkip(skip)
                }
                isComparing={skipsToCompare.includes(skip.id)}
              />
            </div>
          ))}
        </motion.div>

        {/* Footer - Portfolio Link (only show if no skip is selected) */}
        {!selectedSkip && (
          <div className="py-4 text-center text-muted-foreground text-sm">
            <p>
              Design by{' '}
              <a
                href="https://pauldoros.site"
                target="_blank"
                rel="noopener noreferrer"
                className="text-primary hover:text-primary/80"
              >
                Paul Doros
              </a>
            </p>
            <p className="mt-1">
              <Link to="/examples" className="text-primary hover:text-primary/80">
                View UI Examples
              </Link>
            </p>
          </div>
        )}
      </div>

      {/* Proceed button (fixed at bottom) */}
      {selectedSkip && (
        <motion.div
          className="fixed bottom-0 left-0 right-0 bg-background/80 backdrop-blur-sm border-t border-border py-3 md:py-4 z-50"
          initial={{ y: 100 }}
          animate={{ y: 0 }}
          transition={{ type: 'spring', stiffness: 400, damping: 40 }}
        >
          <div className="container mx-auto px-4 flex flex-col sm:flex-row justify-between items-center gap-3">
            <div className="flex flex-col items-center sm:items-start">
              <span className="text-xs sm:text-sm text-muted-foreground">Selected:</span>
              <span className="font-semibold text-foreground text-center sm:text-left">
                {selectedSkip.size} Yard Skip - £
                {Math.round(
                  selectedSkip.price_before_vat +
                    (selectedSkip.price_before_vat * selectedSkip.vat) / 100
                )}
              </span>
            </div>
            <div className="w-full sm:w-auto">
              <GradientButton
                variant="proceed"
                size="sm"
                className="w-full sm:w-auto"
                onClick={handleProceed}
              >
                Proceed to Checkout →
              </GradientButton>
            </div>
          </div>
        </motion.div>
      )}

      {/* Theme toggle */}
      <div className="fixed top-8 lg:top-4 right-4 z-50">
        <ThemeToggle />
      </div>

      {/* Chat assistant */}
      <ChatAssistant />

      {/* Skip Comparison Modal */}
      {isComparisonModalOpen && (
        <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <motion.div
            className="bg-card rounded-lg shadow-lg border border-border w-full max-w-4xl max-h-[90vh] overflow-auto"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
          >
            <div className="sticky top-0 bg-card border-b border-border p-4 flex justify-between items-center z-10">
              <h2 className="text-lg font-semibold flex items-center gap-2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="text-primary"
                >
                  <path d="M16 3h5v5" />
                  <path d="M8 3H3v5" />
                  <path d="M21 13v5a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5" />
                  <path d="m21 8-5-5-5 5" />
                  <path d="M3 16l5 5 5-5" />
                </svg>
                Skip Comparison
              </h2>
              <button
                onClick={closeComparisonModal}
                className="p-1 rounded-full hover:bg-muted transition-colors duration-200"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M18 6 6 18" />
                  <path d="m6 6 12 12" />
                </svg>
              </button>
            </div>

            <div className="p-4">
              {/* Introduction text */}
              <div className="mb-4 p-3 bg-primary/5 rounded-md border border-primary/10 text-sm">
                <p className="text-muted-foreground">
                  Compare up to three skips side by side to find the best option for your needs.
                  Select a skip when you're ready to proceed.
                </p>
              </div>

              <div className="overflow-x-auto no-scrollbar">
                <table className="w-full border-collapse comparison-table">
                  <thead>
                    <tr>
                      <th className="text-left text-sm font-medium bg-muted/50 rounded-tl-md"></th>
                      {skipsToCompare.map((skipId, index) => {
                        const skip = skips.find(s => s.id === skipId);
                        return skip ? (
                          <th
                            key={skipId}
                            className={`text-center bg-primary/5 ${index === skipsToCompare.length - 1 ? 'rounded-tr-md' : ''}`}
                          >
                            <div className="relative pb-1">
                              <button
                                onClick={() => removeSkipFromComparison(skipId)}
                                className="absolute -top-2 -right-2 w-5 h-5 rounded-full bg-muted flex items-center justify-center text-muted-foreground hover:bg-muted-foreground/20 transition-colors"
                                title="Remove from comparison"
                              >
                                ✕
                              </button>
                              <div className="text-sm font-semibold">{skip.size} Yard Skip</div>
                              <div className="text-xs text-primary mt-1">{skip.name}</div>
                            </div>
                          </th>
                        ) : null;
                      })}
                    </tr>
                  </thead>
                  <tbody>
                    <tr className="border-b border-border">
                      <td className="text-sm font-medium bg-muted/30">Image</td>
                      {skipsToCompare.map(skipId => {
                        const skip = skips.find(s => s.id === skipId);
                        return skip ? (
                          <td key={skipId} className="text-center">
                            <div className="relative w-32 h-20 mx-auto overflow-hidden rounded-md">
                              <img
                                src={skip.imageUrl || '/images/skip-default.jpg'}
                                alt={`${skip.size} Yard Skip`}
                                className="w-full h-full object-cover"
                                onError={e => {
                                  const target = e.target as HTMLImageElement;
                                  target.src = '/images/skip-default.jpg';
                                }}
                              />
                            </div>
                          </td>
                        ) : null;
                      })}
                    </tr>
                    <tr className="border-b border-border">
                      <td className="text-sm font-medium bg-muted/30">Price (incl. VAT)</td>
                      {skipsToCompare.map(skipId => {
                        const skip = skips.find(s => s.id === skipId);
                        return skip ? (
                          <td key={skipId} className="text-center">
                            <div className="font-semibold text-lg text-primary">
                              £
                              {Math.round(
                                skip.price_before_vat + (skip.price_before_vat * skip.vat) / 100
                              )}
                            </div>
                            <div className="text-xs text-muted-foreground">
                              £{skip.price_before_vat} + VAT
                            </div>
                          </td>
                        ) : null;
                      })}
                    </tr>
                    <tr className="border-b border-border">
                      <td className="text-sm font-medium bg-muted/30">Size</td>
                      {skipsToCompare.map(skipId => {
                        const skip = skips.find(s => s.id === skipId);
                        return skip ? (
                          <td key={skipId} className="text-center">
                            <div className="flex flex-col items-center">
                              <span className="font-semibold">{skip.size} yards</span>
                              <span className="text-xs text-muted-foreground mt-1">
                                Approx. {skip.size * 3} bags of waste
                              </span>
                            </div>
                          </td>
                        ) : null;
                      })}
                    </tr>
                    <tr className="border-b border-border">
                      <td className="text-sm font-medium bg-muted/30">Hire Period</td>
                      {skipsToCompare.map(skipId => {
                        const skip = skips.find(s => s.id === skipId);
                        return skip ? (
                          <td key={skipId} className="text-center">
                            <div className="font-medium">{skip.hire_period_days} days</div>
                          </td>
                        ) : null;
                      })}
                    </tr>
                    <tr className="border-b border-border">
                      <td className="text-sm font-medium bg-muted/30">Heavy Waste</td>
                      {skipsToCompare.map(skipId => {
                        const skip = skips.find(s => s.id === skipId);
                        return skip ? (
                          <td key={skipId} className="text-center">
                            {skip.allows_heavy_waste ? (
                              <div className="flex items-center justify-center gap-1.5">
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  className="text-green-500"
                                >
                                  <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14" />
                                  <polyline points="22 4 12 14.01 9 11.01" />
                                </svg>
                                <span className="text-green-500">Supported</span>
                              </div>
                            ) : (
                              <div className="flex items-center justify-center gap-1.5">
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  className="text-red-500"
                                >
                                  <circle cx="12" cy="12" r="10" />
                                  <line x1="15" y1="9" x2="9" y2="15" />
                                  <line x1="9" y1="9" x2="15" y2="15" />
                                </svg>
                                <span className="text-red-500">Not Supported</span>
                              </div>
                            )}
                          </td>
                        ) : null;
                      })}
                    </tr>
                    <tr className="border-b border-border">
                      <td className="text-sm font-medium bg-muted/30">Road Placement</td>
                      {skipsToCompare.map(skipId => {
                        const skip = skips.find(s => s.id === skipId);
                        return skip ? (
                          <td key={skipId} className="text-center">
                            {skip.allowed_on_road ? (
                              <div className="flex items-center justify-center gap-1.5">
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  className="text-green-500"
                                >
                                  <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14" />
                                  <polyline points="22 4 12 14.01 9 11.01" />
                                </svg>
                                <span className="text-green-500">Supported</span>
                              </div>
                            ) : (
                              <div className="flex items-center justify-center gap-1.5">
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  className="text-red-500"
                                >
                                  <circle cx="12" cy="12" r="10" />
                                  <line x1="15" y1="9" x2="9" y2="15" />
                                  <line x1="9" y1="9" x2="15" y2="15" />
                                </svg>
                                <span className="text-red-500">Not Supported</span>
                              </div>
                            )}
                          </td>
                        ) : null;
                      })}
                    </tr>
                    <tr>
                      <td className="text-sm font-medium bg-muted/30 rounded-bl-md">
                        Postcode Area
                      </td>
                      {skipsToCompare.map((skipId, index) => {
                        const skip = skips.find(s => s.id === skipId);
                        return skip ? (
                          <td
                            key={skipId}
                            className={`text-center ${index === skipsToCompare.length - 1 ? 'rounded-br-md' : ''}`}
                          >
                            <div className="inline-block px-2 py-1 bg-muted/50 rounded-full text-sm">
                              {skip.postcode || 'All Areas'}
                            </div>
                          </td>
                        ) : null;
                      })}
                    </tr>
                  </tbody>
                </table>
              </div>

              <div className="mt-6 flex justify-between items-center">
                <button
                  onClick={closeComparisonModal}
                  className="px-4 py-2 text-sm border border-border rounded-md hover:bg-muted transition-colors flex items-center gap-2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="M19 12H5" />
                    <path d="M12 19l-7-7 7-7" />
                  </svg>
                  Back to Skips
                </button>
                <div className="space-x-3">
                  {skipsToCompare.map(skipId => {
                    const skip = skips.find(s => s.id === skipId);
                    return skip ? (
                      <motion.button
                        key={skipId}
                        onClick={() => {
                          setSelectedSkip(skip);
                          closeComparisonModal();
                        }}
                        className={`px-4 py-2 text-sm rounded-md transition-colors comparison-select-button ${
                          selectedSkip?.id === skipId
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-primary/10 text-primary hover:bg-primary/20'
                        }`}
                        whileHover={{ scale: 1.03 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        {selectedSkip?.id === skipId ? (
                          <span className="flex items-center gap-1.5">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                              strokeLinecap="round"
                              strokeLinejoin="round"
                            >
                              <path d="M20 6 9 17l-5-5" />
                            </svg>
                            Selected
                          </span>
                        ) : (
                          <span>Select {skip.size}yd Skip</span>
                        )}
                      </motion.button>
                    ) : null;
                  })}
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      )}

      {showCompare && (
        <motion.div
          className="skip-comparison-panel"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          <div className="w-full flex justify-between items-center px-3 py-2 border-b border-border">
            <span className="text-xs font-medium">Comparison ({skipsToCompare.length}/3)</span>
            <button
              onClick={() => setShowCompare(false)}
              className="text-muted-foreground hover:text-foreground"
            >
              ✕
            </button>
          </div>

          {skipsToCompare.length > 0 ? (
            <>
              <div className="p-2 space-y-2">
                {skipsToCompare.map(skipId => {
                  const skip = skips.find(s => s.id === skipId);
                  return skip ? (
                    <div
                      key={skipId}
                      className="flex justify-between items-center p-2 bg-background rounded-md text-xs comparison-item"
                    >
                      <div className="flex items-center gap-2">
                        <div className="w-6 h-6 bg-primary/10 rounded-md flex items-center justify-center text-primary font-medium">
                          {skip.size}
                        </div>
                        <span>{skip.name || `${skip.size} Yard Skip`}</span>
                      </div>
                      <button
                        onClick={() => removeSkipFromComparison(skipId)}
                        className="text-muted-foreground hover:text-destructive transition-colors"
                        aria-label="Remove from comparison"
                      >
                        ✕
                      </button>
                    </div>
                  ) : null;
                })}
              </div>

              {skipsToCompare.length >= 2 && (
                <div className="p-2 pt-0">
                  <button
                    onClick={openComparisonModal}
                    className="w-full mt-1 py-2 px-3 text-xs font-medium bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors flex items-center justify-center gap-1.5"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="14"
                      height="14"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    >
                      <rect x="8" y="2" width="8" height="4" rx="1" ry="1" />
                      <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" />
                      <path d="M12 11h4" />
                      <path d="M12 16h4" />
                      <path d="M8 11h.01" />
                      <path d="M8 16h.01" />
                    </svg>
                    Compare Details
                  </button>
                </div>
              )}
            </>
          ) : (
            <div className="p-4 text-center">
              <p className="text-xs text-muted-foreground">Select up to 3 skips to compare</p>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="mx-auto mt-2 text-muted-foreground/50"
              >
                <path d="M16 3h5v5" />
                <path d="M8 3H3v5" />
                <path d="M21 13v5a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5" />
                <path d="m21 8-5-5-5 5" />
                <path d="M3 16l5 5 5-5" />
              </svg>
            </div>
          )}
        </motion.div>
      )}
    </div>
  );
}
