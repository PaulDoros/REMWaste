import React, { useState, useEffect, useMemo } from 'react';
import { useNavigate, useSearchParams, Link } from 'react-router';
import { motion, AnimatePresence } from 'framer-motion';
import { skips } from '../constants/skips';
import { useSkipContext } from '../context/SkipContext';
import SkipCard from '../components/SkipCard';
import ProgressIndicator from '../components/ProgressIndicator';
import ThemeToggle from '../components/ThemeToggle';
import ChatAssistant from '../components/ChatAssistant';

import { GradientButton } from '../components/ui/gradient-button';
import SparklesHeader from '../components/SparklesHeader';
import { SparklesCore } from '~/components/ui/sparkles';
import {
  Drawer,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
  DrawerClose,
  DrawerFooter,
  DrawerDescription,
  DrawerTrigger,
} from '~/components/ui/drawer';
// This type mimics what would normally be generated by Route types
type ComponentProps = {
  params: {};
};

// Hidden security mechanisms
const VALIDATION_KEY = 'pd_' + btoa('RemWasteSkips').substring(0, 8);
const projectValidationSignature = 'Paul_Doros_Demo_Protected_c' + new Date().getFullYear();
const expirationCheck = () => new Date() < new Date('2025-04-17');

// Add window property extension for TypeScript
declare global {
  interface Window {
    [key: string]: any;
  }
}

// Define steps for the progress indicator
const STEPS = [
  { id: 'postcode', label: 'Postcode', isCompleted: true },
  { id: 'waste-type', label: 'Waste Type', isCompleted: true },
  { id: 'select-skip', label: 'Select Skip', isActive: true },
  { id: 'permit-check', label: 'Permit Check' },
  { id: 'choose-date', label: 'Choose Date' },
  { id: 'payment', label: 'Payment' },
];

// Sort and filter options
const SORT_OPTIONS = [
  { id: 'size', label: 'Size (small to large)' },
  { id: 'size-desc', label: 'Size (large to small)' },
  { id: 'price', label: 'Price (low to high)' },
  { id: 'price-desc', label: 'Price (high to low)' },
];

// Add the FilterIcon component definition
const FilterIcon = ({ className }: { className?: string }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
    className={className}
  >
    <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
  </svg>
);

export default function Component({ params }: ComponentProps) {
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();
  const { selectedSkip, setSelectedSkip } = useSkipContext();

  // Hidden security validation
  useEffect(() => {
    // Validate project and expiration
    if (!expirationCheck() || !window[btoa('isValid')]) {
      // Create a delayed redirect for expired demos (will redirect in the future)
      const checkLicense = () => {
        try {
          const validationElement = document.createElement('div');
          validationElement.className = 'pd__validation';
          validationElement.dataset.key = VALIDATION_KEY;
          validationElement.dataset.signature = projectValidationSignature;
          document.body.appendChild(validationElement);

          // Set a global validation flag (obfuscated)
          window[btoa('isValid')] = true;

          // Add hidden message in DOM that this is protected
          console.log('%c• Protected by Paul Doros •', 'color:transparent');
        } catch (e) {
          // Silent error
        }
      };

      // Delay check to avoid immediate detection
      setTimeout(checkLicense, Math.random() * 5000 + 3000);
    }
  }, []);

  // Get filter/sort values from URL params or defaults
  const [sortBy, setSortBy] = useState(searchParams.get('sort') || 'size');
  const [filterHeavyWaste, setFilterHeavyWaste] = useState(
    searchParams.get('heavyWaste') === 'true'
  );
  const [filterOnRoad, setFilterOnRoad] = useState(searchParams.get('onRoad') === 'true');

  // Accordion states
  const [isSortOpen, setIsSortOpen] = useState(true);
  const [isFeaturesOpen, setIsFeaturesOpen] = useState(true);
  const [isCompareOpen, setIsCompareOpen] = useState(true);

  // Mobile filter drawer state
  const [isFilterOpen, setIsFilterOpen] = useState(false);

  // Comparison feature states
  const [showCompare, setShowCompare] = useState(false);
  const [skipsToCompare, setSkipsToCompare] = useState<number[]>([]);
  const [isComparisonModalOpen, setIsComparisonModalOpen] = useState(false);

  // Comparison functions
  const toggleSkipComparison = (skipId: number) => {
    if (skipsToCompare.includes(skipId)) {
      removeSkipFromComparison(skipId);
    } else {
      if (skipsToCompare.length < 3) {
        // Limit to 3 skips for comparison
        setSkipsToCompare([...skipsToCompare, skipId]);
      }
    }
  };

  const removeSkipFromComparison = (skipId: number) => {
    setSkipsToCompare(skipsToCompare.filter(id => id !== skipId));
  };

  const openComparisonModal = () => {
    if (skipsToCompare.length >= 2) {
      setIsComparisonModalOpen(true);
    }
  };

  const closeComparisonModal = () => {
    setIsComparisonModalOpen(false);
  };

  // Update URL when filters change
  useEffect(() => {
    const newParams = new URLSearchParams();

    if (sortBy) newParams.set('sort', sortBy);
    if (filterHeavyWaste) newParams.set('heavyWaste', 'true');
    if (filterOnRoad) newParams.set('onRoad', 'true');

    setSearchParams(newParams, { replace: true });
  }, [sortBy, filterHeavyWaste, filterOnRoad, setSearchParams]);

  // Apply filters and sorting
  const filteredSkips = skips
    .filter(skip => {
      if (filterHeavyWaste && !skip.allows_heavy_waste) return false;
      if (filterOnRoad && !skip.allowed_on_road) return false;
      return true;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'size':
          return a.size - b.size;
        case 'size-desc':
          return b.size - a.size;
        case 'price':
          return a.price_before_vat - b.price_before_vat;
        case 'price-desc':
          return b.price_before_vat - a.price_before_vat;
        default:
          return a.size - b.size;
      }
    });

  const handleProceed = () => {
    if (selectedSkip) {
      navigate('/confirm');
    }
  };

  const resetFilters = () => {
    setSortBy('size');
    setFilterHeavyWaste(false);
    setFilterOnRoad(false);
    setIsFilterOpen(false);
    setShowCompare(false);
    setSkipsToCompare([]);
  };

  return (
    <div className="min-h-screen bg-background text-foreground relative" data-author="Paul Doros">
      {/* Subtle sparkles effect at the top */}
      <SparklesHeader
        particleColor="var(--primary)"
        height="h-[120px]"
        particleDensity={20}
        minSize={0.2}
        maxSize={0.8}
        speed={0.5}
      />

      {/* Progress indicator with adjusted position to not overlap with theme toggle */}
      <div className="pt-8 md:pt-10 px-2 sm:px-4 relative z-40">
        <ProgressIndicator steps={STEPS} />
      </div>

      {/* Page content */}
      <div className="container mx-auto px-3 sm:px-4 pt-0 pb-24 relative z-30">
        {/* Title and sparkles section */}
        <div className="relative mb-8 sm:mb-12 w-full flex flex-col items-center justify-center overflow-hidden rounded-md">
          <div className="w-full h-40 relative mx-auto">
            {/* Gradients */}
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-indigo-500 to-transparent h-[2px] w-3/4 blur-sm" />
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-indigo-500 to-transparent h-px w-3/4" />
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-sky-500 to-transparent h-[5px] w-1/4 blur-sm" />
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-sky-500 to-transparent h-px w-1/4" />
            <motion.h1
              className="absolute left-1/2 -translate-x-1/2 top-0 text-2xl sm:text-3xl font-bold mb-3 text-center mt-4 w-full"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              Choose Your Skip Size
            </motion.h1>

            <p className="absolute left-1/2 -translate-x-1/2 top-16 sm:top-20 text-muted-foreground text-center mb-5 w-full px-4 text-sm sm:text-base">
              Select the skip size that best suits your needs from our wide selection.
            </p>
            {/* Core component */}
            {useMemo(
              () => (
                <SparklesCore
                  background="transparent"
                  minSize={0.4}
                  maxSize={1}
                  particleDensity={1200}
                  className="w-full h-full pointer-events-none"
                  particleColor="#FFFFFF"
                />
              ),
              []
            )}

            {/* Radial Gradient to prevent sharp edges */}
            <div className="absolute inset-0 w-full h-full bg-background [mask-image:radial-gradient(800px_200px_at_top,transparent_20%,white)]"></div>
          </div>
        </div>

        {/* Mobile filter toggle and current filter indicators */}
        <div className="md:hidden flex items-center justify-between mb-4">
          <motion.button
            className="flex items-center gap-2 bg-card border border-border hover:bg-muted text-foreground px-3 py-2 rounded-md transition-colors text-sm shadow-sm"
            onClick={() => setIsFilterOpen(!isFilterOpen)}
            whileTap={{ scale: 0.97 }}
          >
            <span className="flex items-center gap-1.5">
              <FilterIcon className="text-primary" />
              <span className="font-medium">Filter & Sort</span>
            </span>

            {/* Active filters indicator */}
            <div className="flex items-center gap-1.5 ml-1">
              {(filterHeavyWaste || filterOnRoad || sortBy !== 'size') && (
                <span className="flex h-5 w-5 items-center justify-center rounded-full bg-primary/10 text-xs text-primary font-medium">
                  {(() => {
                    let count = 0;
                    if (filterHeavyWaste) count++;
                    if (filterOnRoad) count++;
                    if (sortBy !== 'size') count++;
                    return count;
                  })()}
                </span>
              )}
              {showCompare && (
                <span className="flex h-5 items-center justify-center rounded-full bg-primary text-xs text-primary-foreground font-medium px-1.5 flex-row gap-0.5">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="10"
                    height="10"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <path d="M16 3h5v5" />
                    <path d="M8 3H3v5" />
                    <path d="M21 13v5a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5" />
                    <path d="m21 8-5-5-5 5" />
                    <path d="M3 16l5 5 5-5" />
                  </svg>
                  {skipsToCompare.length}
                </span>
              )}
            </div>
          </motion.button>

          <button
            onClick={resetFilters}
            className={`px-2 py-1.5 text-xs ${filterHeavyWaste || filterOnRoad || sortBy !== 'size' || showCompare ? 'text-primary hover:bg-primary/10 rounded-md' : 'text-muted-foreground'}`}
            disabled={!(filterHeavyWaste || filterOnRoad || sortBy !== 'size' || showCompare)}
          >
            Reset
          </button>
        </div>

        {/* Filter and sort controls */}

        <div className="flex flex-col gap-4">
          {/* Header with close button on mobile */}
          {isFilterOpen && (
            <div className="flex items-center justify-between md:hidden">
              <h3 className="text-sm font-medium">Filter Options</h3>
              <button
                onClick={() => setIsFilterOpen(false)}
                className="text-muted-foreground hover:text-foreground"
              >
                ✕
              </button>
            </div>
          )}

          <div className="space-y-3">
            {/* Refine Results Accordion */}
            <div className="rounded-md border border-border overflow-hidden">
              <div className="flex items-center justify-between bg-muted/30 px-4 py-2.5">
                <button
                  className="flex items-center gap-2 text-left"
                  onClick={() => setIsFeaturesOpen(!isFeaturesOpen)}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="14"
                    height="14"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="text-primary"
                  >
                    <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
                    <circle cx="12" cy="12" r="3" />
                  </svg>
                  <h4 className="text-sm font-medium">Filters & Comparison</h4>
                </button>
                <div className="flex items-center gap-2">
                  <button
                    onClick={resetFilters}
                    className={`px-2 py-1.5 text-xs flex items-center gap-1.5 ${
                      filterHeavyWaste || filterOnRoad || sortBy !== 'size' || showCompare
                        ? 'text-primary hover:bg-primary/10 rounded-md'
                        : 'text-muted-foreground'
                    }`}
                    disabled={
                      !(filterHeavyWaste || filterOnRoad || sortBy !== 'size' || showCompare)
                    }
                  >
                    Reset
                    {(filterHeavyWaste || filterOnRoad || sortBy !== 'size' || showCompare) && (
                      <span className="flex h-4 w-4 items-center justify-center rounded-full bg-primary/10 text-[10px] font-medium">
                        {(() => {
                          let count = 0;
                          if (filterHeavyWaste) count++;
                          if (filterOnRoad) count++;
                          if (sortBy !== 'size') count++;
                          if (showCompare) count++;
                          return count;
                        })()}
                      </span>
                    )}
                  </button>
                  <div
                    className="px-3 py-1.5 text-xs font-medium text-primary hover:text-primary/80 hover:bg-primary/10 rounded-md transition-colors cursor-pointer flex items-center gap-1.5"
                    onClick={() => setIsFeaturesOpen(!isFeaturesOpen)}
                  >
                    {isFeaturesOpen ? 'Hide' : 'Show'}
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="12"
                      height="12"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      className={`transition-transform duration-200 ${isFeaturesOpen ? 'rotate-180' : ''}`}
                    >
                      <path d="m6 9 6 6 6-6" />
                    </svg>
                  </div>
                </div>
              </div>
              <AnimatePresence initial={false} mode="wait">
                {isFeaturesOpen && (
                  <motion.div
                    className="overflow-hidden will-change-transform"
                    initial={{ height: 0, opacity: 0.8 }}
                    animate={{ height: 'auto', opacity: 1 }}
                    exit={{ height: 0, opacity: 0.8 }}
                    transition={{
                      height: {
                        duration: 0.1,
                        ease: 'easeInOut',
                      },
                      opacity: { duration: 0.1 },
                    }}
                  >
                    <div className="p-4">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        {/* Sort Options */}
                        <div className="md:col-span-1 p-4 bg-card/50 rounded-lg border border-border/50">
                          <h5 className="text-xs font-medium text-muted-foreground uppercase tracking-wide mb-2">
                            Sort By
                          </h5>
                          <select
                            value={sortBy}
                            onChange={e => setSortBy(e.target.value)}
                            className="w-full bg-background text-foreground rounded-md border border-border px-3 py-2 text-sm focus:ring-2 focus:ring-primary/30 focus:border-primary transition-all"
                          >
                            {SORT_OPTIONS.map(option => (
                              <option key={option.id} value={option.id}>
                                {option.label}
                              </option>
                            ))}
                          </select>
                        </div>

                        {/* Features */}
                        <div className="md:col-span-1 p-4 bg-card/50 rounded-lg border border-border/50">
                          <h5 className="text-xs font-medium text-muted-foreground uppercase tracking-wide mb-2">
                            Features
                          </h5>
                          <div className="flex flex-col grid-cols-1 md:grid-cols-2 gap-3">
                            <label className="flex items-center gap-2 cursor-pointer group">
                              <div className="relative flex items-center">
                                <input
                                  type="checkbox"
                                  id="heavyWaste"
                                  checked={filterHeavyWaste}
                                  onChange={e => setFilterHeavyWaste(e.target.checked)}
                                  className="rounded-sm w-4 h-4 bg-background border-border text-primary focus:ring-primary"
                                />
                              </div>
                              <div className="flex flex-col">
                                <span
                                  className={`text-sm ${filterHeavyWaste ? 'text-primary font-medium' : 'text-foreground'}`}
                                >
                                  Allows Heavy Waste
                                </span>
                                <span className="text-xs text-muted-foreground">
                                  Concrete, soil and heavy materials
                                </span>
                              </div>
                            </label>

                            <label className="flex items-center gap-2 cursor-pointer group">
                              <div className="relative flex items-center">
                                <input
                                  type="checkbox"
                                  id="onRoad"
                                  checked={filterOnRoad}
                                  onChange={e => setFilterOnRoad(e.target.checked)}
                                  className="rounded-sm w-4 h-4 bg-background border-border text-primary focus:ring-primary"
                                />
                              </div>
                              <div className="flex flex-col">
                                <span
                                  className={`text-sm ${filterOnRoad ? 'text-primary font-medium' : 'text-foreground'}`}
                                >
                                  Road Placement Only
                                </span>
                                <span className="text-xs text-muted-foreground">
                                  Suitable for public road with permit
                                </span>
                              </div>
                            </label>
                          </div>
                        </div>

                        <div className="md:col-span-1 p-4 bg-card/50 rounded-lg border border-border/50">
                          <h5 className="text-xs font-medium text-muted-foreground uppercase tracking-wide mb-2">
                            Comparison
                          </h5>
                          <button
                            onClick={() => setShowCompare(!showCompare)}
                            className={`w-full py-2.5 px-3 text-sm font-medium rounded-md transition-all flex items-center justify-center gap-2 ${
                              showCompare
                                ? 'bg-primary text-primary-foreground ring-2 ring-primary/30 shadow-sm'
                                : 'bg-primary/10 text-primary hover:bg-primary/20'
                            }`}
                          >
                            <motion.svg
                              xmlns="http://www.w3.org/2000/svg"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              animate={{ rotate: showCompare ? 360 : 0 }}
                              transition={{ duration: 0.4 }}
                            >
                              <path d="M16 3h5v5" />
                              <path d="M8 3H3v5" />
                              <path d="M21 13v5a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5" />
                              <path d="m21 8-5-5-5 5" />
                              <path d="M3 16l5 5 5-5" />
                            </motion.svg>
                            <span>{showCompare ? 'Disable Comparison' : 'Enable Comparison'}</span>
                            {skipsToCompare.length > 0 && (
                              <motion.span
                                className="inline-flex items-center justify-center h-5 w-5 text-xs font-medium bg-primary-foreground/20 text-primary-foreground rounded-full ml-1"
                                initial={{ scale: 0.8 }}
                                animate={{ scale: 1 }}
                                transition={{ type: 'spring', stiffness: 500, damping: 15 }}
                              >
                                {skipsToCompare.length}
                              </motion.span>
                            )}
                          </button>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>

            {/* Compare section with enhanced UI - now with bottom slide effect */}
            <div className="flex flex-col gap-2 relative">
              {/* Skip comparison drawer - slides up from bottom */}
              <AnimatePresence>
                {showCompare && (
                  <motion.div
                    className="fixed inset-x-0 bottom-0 md:bottom-auto md:right-4 md:top-52 md:left-auto md:w-80 z-[100]"
                    initial={{ y: '100%', x: 0, opacity: 0 }}
                    animate={{ y: 0, x: 0, opacity: 1 }}
                    exit={{ y: '100%', x: 0, opacity: 0 }}
                    transition={{
                      type: 'spring',
                      damping: 25,
                      stiffness: 200,
                      duration: 0.3,
                    }}
                  >
                    <div className="bg-card shadow-lg border border-border rounded-t-lg md:rounded-lg overflow-hidden max-h-[60vh] flex flex-col">
                      {/* Header with drag handle for mobile */}
                      <div className="sticky top-0 bg-card z-10 border-b border-border p-3 flex justify-between items-center">
                        <div className="flex items-center gap-2">
                          <motion.svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            className="text-primary"
                            animate={{ rotate: [0, 10, 0, -10, 0] }}
                            transition={{ duration: 1, repeat: 0, delay: 0.5 }}
                          >
                            <path d="M16 3h5v5" />
                            <path d="M8 3H3v5" />
                            <path d="M21 13v5a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5" />
                            <path d="m21 8-5-5-5 5" />
                            <path d="M3 16l5 5 5-5" />
                          </motion.svg>
                          <h5 className="text-sm font-medium">
                            Compare Skips{' '}
                            <span className="text-muted-foreground">
                              ({skipsToCompare.length}/3)
                            </span>
                          </h5>
                        </div>
                        <div className="flex items-center gap-1.5">
                          <button
                            onClick={() => setSkipsToCompare([])}
                            className="text-xs text-muted-foreground hover:text-foreground px-1.5 py-0.5 hover:bg-muted rounded"
                            disabled={skipsToCompare.length === 0}
                          >
                            Clear
                          </button>
                          <button
                            onClick={() => setShowCompare(false)}
                            className="text-muted-foreground hover:text-foreground p-1 rounded-full hover:bg-muted"
                          >
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                              strokeLinecap="round"
                              strokeLinejoin="round"
                            >
                              <line x1="18" y1="6" x2="6" y2="18"></line>
                              <line x1="6" y1="6" x2="18" y2="18"></line>
                            </svg>
                          </button>
                        </div>
                      </div>

                      {/* Body content - slides up with height animation */}
                      <motion.div
                        className="p-3 space-y-3 overflow-y-auto flex-1"
                        initial={{ height: 0 }}
                        animate={{ height: 'auto' }}
                        transition={{ duration: 0.2, delay: 0.15 }}
                      >
                        {skipsToCompare.length === 0 ? (
                          <div className="py-8 flex flex-col items-center justify-center text-center">
                            <div className="w-12 h-12 rounded-full bg-muted/50 flex items-center justify-center mb-3">
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="20"
                                height="20"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                strokeWidth="2"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                className="text-muted-foreground"
                              >
                                <circle cx="8" cy="21" r="1" />
                                <circle cx="19" cy="21" r="1" />
                                <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />
                              </svg>
                            </div>
                            <h6 className="text-sm font-medium mb-1">No skips selected</h6>
                            <p className="text-xs text-muted-foreground mb-3">
                              Click on skips below to compare up to 3 options
                            </p>
                          </div>
                        ) : (
                          <>
                            <div className="space-y-2">
                              {skipsToCompare.map(skipId => {
                                const skip = skips.find(s => s.id === skipId);
                                return skip ? (
                                  <motion.div
                                    key={skipId}
                                    className="bg-background rounded-md border border-border p-2.5 flex items-center justify-between"
                                    initial={{ opacity: 0, y: 10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    exit={{ opacity: 0, x: -10 }}
                                    transition={{ duration: 0.2 }}
                                    layout
                                  >
                                    <div className="flex items-center gap-2.5">
                                      <div className="w-8 h-8 rounded bg-primary/10 flex items-center justify-center">
                                        <span className="text-xs font-medium text-primary">
                                          {skip.size}yd
                                        </span>
                                      </div>
                                      <div>
                                        <div className="text-sm font-medium">
                                          {skip.name || `${skip.size}yd Skip`}
                                        </div>
                                        <div className="text-xs text-muted-foreground">
                                          £
                                          {Math.round(
                                            skip.price_before_vat +
                                              (skip.price_before_vat * skip.vat) / 100
                                          )}
                                        </div>
                                      </div>
                                    </div>
                                    <button
                                      onClick={() => removeSkipFromComparison(skipId)}
                                      className="text-muted-foreground hover:text-foreground p-1 rounded-full hover:bg-muted"
                                    >
                                      <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        width="14"
                                        height="14"
                                        viewBox="0 0 24 24"
                                        fill="none"
                                        stroke="currentColor"
                                        strokeWidth="2"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                      >
                                        <line x1="18" y1="6" x2="6" y2="18"></line>
                                        <line x1="6" y1="6" x2="18" y2="18"></line>
                                      </svg>
                                    </button>
                                  </motion.div>
                                ) : null;
                              })}
                            </div>

                            {skipsToCompare.length < 3 && (
                              <div className="text-xs px-3 py-2.5 rounded-md bg-muted/30 text-muted-foreground border border-dashed border-border flex items-center justify-center gap-1.5">
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  width="12"
                                  height="12"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                >
                                  <line x1="12" y1="5" x2="12" y2="19"></line>
                                  <line x1="5" y1="12" x2="19" y2="12"></line>
                                </svg>
                                Select more skips to compare ({skipsToCompare.length}/3)
                              </div>
                            )}
                          </>
                        )}
                      </motion.div>

                      {/* Footer with action buttons */}
                      {skipsToCompare.length >= 2 && (
                        <div className="p-3 border-t border-border">
                          <Drawer>
                            <DrawerTrigger asChild>
                              <motion.button
                                className="w-full py-2.5 px-3 text-sm font-medium bg-primary text-primary-foreground rounded-md transition-all flex items-center justify-center gap-1.5 hover:bg-primary/90"
                                whileHover={{ scale: 1.02 }}
                                whileTap={{ scale: 0.98 }}
                                aria-label="View detailed comparison"
                              >
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  aria-hidden="true"
                                >
                                  <path d="M18 6H6" />
                                  <path d="M18 12H6" />
                                  <path d="M18 18H6" />
                                </svg>
                                View Detailed Comparison
                              </motion.button>
                            </DrawerTrigger>
                            <DrawerContent className="max-h-[85dvh]">
                              <DrawerHeader>
                                <DrawerTitle className="flex items-center gap-2">
                                  <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="20"
                                    height="20"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    strokeWidth="2"
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    className="text-primary"
                                    aria-hidden="true"
                                  >
                                    <path d="M16 3h5v5" />
                                    <path d="M8 3H3v5" />
                                    <path d="M21 13v5a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5" />
                                    <path d="m21 8-5-5-5 5" />
                                    <path d="M3 16l5 5 5-5" />
                                  </svg>
                                  Skip Comparison
                                </DrawerTitle>
                                <DrawerDescription>
                                  Compare selected skips side by side
                                </DrawerDescription>
                              </DrawerHeader>

                              <div className="p-4 overflow-y-auto">
                                <div className="overflow-x-auto">
                                  <table className="w-full border-collapse comparison-table">
                                    <thead>
                                      <tr className="border-b">
                                        <th className="py-2 px-3 text-left font-medium text-sm">
                                          Feature
                                        </th>
                                        {skipsToCompare.map(skipId => {
                                          const skip = skips.find(s => s.id === skipId);
                                          return skip ? (
                                            <th
                                              key={skipId}
                                              className="py-2 px-3 text-center font-medium text-sm"
                                            >
                                              {skip.name || `${skip.size}yd Skip`}
                                            </th>
                                          ) : null;
                                        })}
                                      </tr>
                                    </thead>
                                    <tbody>
                                      <tr className="border-b">
                                        <td className="py-2 px-3 text-sm font-medium">Size</td>
                                        {skipsToCompare.map(skipId => {
                                          const skip = skips.find(s => s.id === skipId);
                                          return skip ? (
                                            <td
                                              key={skipId}
                                              className="py-2 px-3 text-center text-sm"
                                            >
                                              {skip.size} cubic yards
                                            </td>
                                          ) : null;
                                        })}
                                      </tr>
                                      <tr className="border-b">
                                        <td className="py-2 px-3 text-sm font-medium">Price</td>
                                        {skipsToCompare.map(skipId => {
                                          const skip = skips.find(s => s.id === skipId);
                                          return skip ? (
                                            <td
                                              key={skipId}
                                              className="py-2 px-3 text-center text-sm"
                                            >
                                              £
                                              {Math.round(
                                                skip.price_before_vat +
                                                  (skip.price_before_vat * skip.vat) / 100
                                              )}
                                            </td>
                                          ) : null;
                                        })}
                                      </tr>
                                      <tr className="border-b">
                                        <td className="py-2 px-3 text-sm font-medium">
                                          Heavy Waste
                                        </td>
                                        {skipsToCompare.map(skipId => {
                                          const skip = skips.find(s => s.id === skipId);
                                          return skip ? (
                                            <td
                                              key={skipId}
                                              className="py-2 px-3 text-center text-sm"
                                            >
                                              {skip.allows_heavy_waste ? (
                                                <span className="text-green-500">Yes</span>
                                              ) : (
                                                <span className="text-red-500">No</span>
                                              )}
                                            </td>
                                          ) : null;
                                        })}
                                      </tr>
                                      <tr className="border-b">
                                        <td className="py-2 px-3 text-sm font-medium">
                                          Road Placement
                                        </td>
                                        {skipsToCompare.map(skipId => {
                                          const skip = skips.find(s => s.id === skipId);
                                          return skip ? (
                                            <td
                                              key={skipId}
                                              className="py-2 px-3 text-center text-sm"
                                            >
                                              {skip.allowed_on_road ? (
                                                <span className="text-green-500">Yes</span>
                                              ) : (
                                                <span className="text-red-500">No</span>
                                              )}
                                            </td>
                                          ) : null;
                                        })}
                                      </tr>
                                      <tr className="border-b">
                                        <td className="py-2 px-3 text-sm font-medium">Capacity</td>
                                        {skipsToCompare.map(skipId => {
                                          const skip = skips.find(s => s.id === skipId);
                                          return skip ? (
                                            <td
                                              key={skipId}
                                              className="py-2 px-3 text-center text-sm"
                                            >
                                              Approx. {skip.size * 200}kg
                                            </td>
                                          ) : null;
                                        })}
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>
                              </div>

                              <DrawerFooter>
                                <div className="flex flex-wrap gap-2 justify-center sm:justify-end">
                                  {skipsToCompare.map(skipId => {
                                    const skip = skips.find(s => s.id === skipId);
                                    return skip ? (
                                      <motion.button
                                        key={skipId}
                                        onClick={() => {
                                          setSelectedSkip(skip);
                                          closeComparisonModal();
                                        }}
                                        className={`px-4 py-2 text-sm rounded-md transition-colors comparison-select-button ${
                                          selectedSkip?.id === skipId
                                            ? 'bg-primary text-primary-foreground'
                                            : 'bg-primary/10 text-primary hover:bg-primary/20'
                                        }`}
                                        whileHover={{ scale: 1.03 }}
                                        whileTap={{ scale: 0.98 }}
                                      >
                                        {selectedSkip?.id === skipId ? (
                                          <span className="flex items-center gap-1.5">
                                            <svg
                                              xmlns="http://www.w3.org/2000/svg"
                                              width="16"
                                              height="16"
                                              viewBox="0 0 24 24"
                                              fill="none"
                                              stroke="currentColor"
                                              strokeWidth="2"
                                              strokeLinecap="round"
                                              strokeLinejoin="round"
                                            >
                                              <path d="M20 6 9 17l-5-5" />
                                            </svg>
                                            Selected
                                          </span>
                                        ) : (
                                          <span>Select {skip.size}yd Skip</span>
                                        )}
                                      </motion.button>
                                    ) : null;
                                  })}
                                </div>
                                <DrawerClose asChild>
                                  <button className="px-4 py-2 text-sm border border-border rounded-md hover:bg-muted transition-colors flex items-center justify-center gap-2">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="16"
                                      height="16"
                                      viewBox="0 0 24 24"
                                      fill="none"
                                      stroke="currentColor"
                                      strokeWidth="2"
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                    >
                                      <path d="M19 12H5" />
                                      <path d="M12 19l-7-7 7-7" />
                                    </svg>
                                    Back to Skips
                                  </button>
                                </DrawerClose>
                              </DrawerFooter>
                            </DrawerContent>
                          </Drawer>
                        </div>
                      )}

                      {/* Pull indicator for mobile */}
                      <div className="absolute -top-3 left-1/2 transform -translate-x-1/2 md:hidden">
                        <div className="w-10 h-1 bg-border rounded-full"></div>
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </div>
        </div>

        {/* No results message */}
        {filteredSkips.length === 0 && (
          <motion.div
            className="bg-card border border-border rounded-lg p-6 text-center my-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <svg
              className="w-12 h-12 mx-auto text-muted-foreground mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={1.5}
                d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M12 20h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            <h3 className="text-lg font-semibold mb-2">No Matching Skips</h3>
            <p className="text-muted-foreground mb-4">
              Try adjusting your filters to see more options.
            </p>
            <button
              onClick={resetFilters}
              className="px-4 py-2 bg-primary/10 hover:bg-primary/20 text-primary rounded-md transition-colors"
            >
              Reset Filters
            </button>
          </motion.div>
        )}

        {/* Skip cards grid */}
        <motion.div
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {filteredSkips.map(skip => (
            <div
              key={skip.id}
              className={`rounded-lg shadow-sm border border-background overflow-hidden `}
            >
              <SkipCard
                skip={skip}
                isSelected={selectedSkip?.id === skip.id}
                onSelect={() =>
                  showCompare ? toggleSkipComparison(skip.id) : setSelectedSkip(skip)
                }
                isComparing={skipsToCompare.includes(skip.id)}
              />
            </div>
          ))}
        </motion.div>

        {/* Footer - Portfolio Link (only show if no skip is selected) */}
        {!selectedSkip && (
          <div className="py-4 text-center text-muted-foreground text-sm">
            <p>
              <a
                href="https://pauldoros.site"
                target="_blank"
                rel="noopener noreferrer"
                className="text-primary hover:text-primary/80"
              >
                Design by Paul Doros
              </a>
            </p>
          </div>
        )}
      </div>

      {/* Proceed button (fixed at bottom) */}
      {selectedSkip && (
        <motion.div
          className="fixed bottom-0 left-0 right-0 bg-background/80 backdrop-blur-sm border-t border-border py-3 md:py-4 z-50"
          initial={{ y: 100 }}
          animate={{ y: 0 }}
          transition={{ type: 'spring', stiffness: 400, damping: 40 }}
        >
          <div className="container mx-auto px-4 flex flex-col sm:flex-row justify-between items-center gap-3">
            <div className="flex flex-col items-center sm:items-start">
              <span className="text-xs sm:text-sm text-muted-foreground">Selected:</span>
              <span className="font-semibold text-foreground text-center sm:text-left">
                {selectedSkip.size} Yard Skip - £
                {Math.round(
                  selectedSkip.price_before_vat +
                    (selectedSkip.price_before_vat * selectedSkip.vat) / 100
                )}
              </span>
            </div>
            <div className="w-full sm:w-auto">
              <GradientButton
                variant="proceed"
                size="sm"
                className="w-full sm:w-auto"
                onClick={handleProceed}
              >
                Proceed to Checkout →
              </GradientButton>
            </div>
          </div>
        </motion.div>
      )}

      {/* Theme toggle */}
      <div className="fixed top-8 lg:top-4 right-4 z-50">
        <ThemeToggle />
      </div>

      {/* Chat assistant */}
      <ChatAssistant />
    </div>
  );
}
