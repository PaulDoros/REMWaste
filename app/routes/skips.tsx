import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams, Link } from 'react-router';
import { motion } from 'framer-motion';
import { skips } from '../constants/skips';
import { useSkipContext } from '../context/SkipContext';
import SkipCard from '../components/SkipCard';
import ProgressIndicator from '../components/ProgressIndicator';
import ThemeToggle from '../components/ThemeToggle';
import ChatAssistant from '../components/ChatAssistant';
import { Button } from '../components/ui/moving-border';
import { GradientButton } from '../components/ui/gradient-button';
import SparklesHeader from '../components/SparklesHeader';
import { SparklesPreview } from '~/components/ui/sparkles-demo';
import { SparklesCore } from '~/components/ui/sparkles';

// This type mimics what would normally be generated by Route types
type ComponentProps = {
  params: {};
};

// Define steps for the progress indicator
const STEPS = [
  { id: 'postcode', label: 'Postcode', isCompleted: true },
  { id: 'waste-type', label: 'Waste Type', isCompleted: true },
  { id: 'select-skip', label: 'Select Skip', isActive: true },
  { id: 'permit-check', label: 'Permit Check' },
  { id: 'choose-date', label: 'Choose Date' },
  { id: 'payment', label: 'Payment' },
];

// Sort and filter options
const SORT_OPTIONS = [
  { id: 'size', label: 'Size (small to large)' },
  { id: 'size-desc', label: 'Size (large to small)' },
  { id: 'price', label: 'Price (low to high)' },
  { id: 'price-desc', label: 'Price (high to low)' },
];

export default function Component({ params }: ComponentProps) {
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();
  const { selectedSkip, setSelectedSkip } = useSkipContext();

  // Get filter/sort values from URL params or defaults
  const [sortBy, setSortBy] = useState(searchParams.get('sort') || 'size');
  const [filterHeavyWaste, setFilterHeavyWaste] = useState(
    searchParams.get('heavyWaste') === 'true'
  );
  const [filterOnRoad, setFilterOnRoad] = useState(searchParams.get('onRoad') === 'true');

  // Mobile filter drawer state
  const [isFilterOpen, setIsFilterOpen] = useState(false);

  // Update URL when filters change
  useEffect(() => {
    const newParams = new URLSearchParams();

    if (sortBy) newParams.set('sort', sortBy);
    if (filterHeavyWaste) newParams.set('heavyWaste', 'true');
    if (filterOnRoad) newParams.set('onRoad', 'true');

    setSearchParams(newParams, { replace: true });
  }, [sortBy, filterHeavyWaste, filterOnRoad, setSearchParams]);

  // Apply filters and sorting
  const filteredSkips = skips
    .filter(skip => {
      if (filterHeavyWaste && !skip.allows_heavy_waste) return false;
      if (filterOnRoad && !skip.allowed_on_road) return false;
      return true;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'size':
          return a.size - b.size;
        case 'size-desc':
          return b.size - a.size;
        case 'price':
          return a.price_before_vat - b.price_before_vat;
        case 'price-desc':
          return b.price_before_vat - a.price_before_vat;
        default:
          return a.size - b.size;
      }
    });

  const handleProceed = () => {
    if (selectedSkip) {
      navigate('/confirm');
    }
  };

  const resetFilters = () => {
    setSortBy('size');
    setFilterHeavyWaste(false);
    setFilterOnRoad(false);
    setIsFilterOpen(false);
  };

  return (
    <div className="min-h-screen bg-background text-foreground relative" data-author="Paul Doros">
      {/* Subtle sparkles effect at the top */}
      <SparklesHeader
        particleColor="var(--primary)"
        height="h-[120px]"
        particleDensity={20}
        minSize={0.2}
        maxSize={0.8}
        speed={0.5}
      />

      {/* Progress indicator with adjusted position to not overlap with theme toggle */}
      <div className="pt-8 md:pt-10 px-2 sm:px-4 relative z-40">
        <ProgressIndicator steps={STEPS} />
      </div>

      {/* Page content */}
      <div className="container mx-auto px-3 sm:px-4 pt-0 pb-24 relative z-30">
        {/* Title and sparkles section */}
        <div className="relative mb-8 sm:mb-12 w-full flex flex-col items-center justify-center overflow-hidden rounded-md">
          <div className="w-full h-40 relative mx-auto">
            {/* Gradients */}
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-indigo-500 to-transparent h-[2px] w-3/4 blur-sm" />
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-indigo-500 to-transparent h-px w-3/4" />
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-sky-500 to-transparent h-[5px] w-1/4 blur-sm" />
            <div className="absolute inset-x-0 left-1/2 -translate-x-1/2 top-0 bg-gradient-to-r from-transparent via-sky-500 to-transparent h-px w-1/4" />
            <motion.h1
              className="absolute left-1/2 -translate-x-1/2 top-0 text-2xl sm:text-3xl font-bold mb-3 text-center mt-4 w-full"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              Choose Your Skip Size
            </motion.h1>

            <p className="absolute left-1/2 -translate-x-1/2 top-16 sm:top-20 text-muted-foreground text-center mb-5 w-full px-4 text-sm sm:text-base">
              Select the skip size that best suits your needs from our wide selection.
            </p>
            {/* Core component */}
            <SparklesCore
              background="transparent"
              minSize={0.4}
              maxSize={1}
              particleDensity={1200}
              className="w-full h-full pointer-events-none"
              particleColor="#FFFFFF"
            />

            {/* Radial Gradient to prevent sharp edges */}
            <div className="absolute inset-0 w-full h-full bg-background [mask-image:radial-gradient(800px_200px_at_top,transparent_20%,white)]"></div>
          </div>
        </div>

        {/* Mobile filter toggle and current filter indicators */}
        <div className="md:hidden flex items-center justify-between mb-4">
          <motion.button
            className="flex items-center space-x-2 bg-primary/10 hover:bg-primary/20 text-primary px-3 py-2 rounded-md transition-colors"
            onClick={() => setIsFilterOpen(!isFilterOpen)}
            whileTap={{ scale: 0.97 }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M22 3H2l8 9.46V19l4 2v-8.54L22 3z" />
            </svg>
            <span>Filters</span>
          </motion.button>

          <div className="flex space-x-2">
            {filterHeavyWaste && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                className="text-xs bg-primary/10 text-primary px-2 py-1 rounded-full"
              >
                Heavy Waste
              </motion.div>
            )}

            {filterOnRoad && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                className="text-xs bg-primary/10 text-primary px-2 py-1 rounded-full"
              >
                Road Only
              </motion.div>
            )}

            {(filterHeavyWaste || filterOnRoad) && (
              <button
                onClick={resetFilters}
                className="text-xs text-muted-foreground hover:text-foreground"
              >
                ✕
              </button>
            )}
          </div>
        </div>

        {/* Filter and sort controls */}
        <motion.div
          className={`${
            isFilterOpen ? 'block' : 'hidden md:block'
          } mb-6 bg-card text-card-foreground p-4 rounded-lg border border-border shadow-sm relative z-40`}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.3 }}
        >
          <div className="flex flex-col gap-4">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium">Filter & Sort</h3>
              {isFilterOpen && (
                <button
                  onClick={() => setIsFilterOpen(false)}
                  className="text-muted-foreground hover:text-foreground"
                >
                  ✕
                </button>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Sort dropdown */}
              <div className="space-y-2">
                <label className="text-sm font-medium text-foreground">Sort by:</label>
                <select
                  value={sortBy}
                  onChange={e => setSortBy(e.target.value)}
                  className="w-full bg-background text-foreground rounded-md border border-border px-3 py-2 text-sm focus:ring-2 focus:ring-primary/30 focus:border-primary transition-all"
                >
                  {SORT_OPTIONS.map(option => (
                    <option key={option.id} value={option.id}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Filter checkboxes */}
              <div className="space-y-3">
                <div className="text-sm font-medium text-foreground">Features:</div>

                <label className="flex items-center gap-2 cursor-pointer group">
                  <div className="relative flex items-center">
                    <input
                      type="checkbox"
                      id="heavyWaste"
                      checked={filterHeavyWaste}
                      onChange={e => setFilterHeavyWaste(e.target.checked)}
                      className="rounded-sm w-4 h-4 bg-background border-border text-primary focus:ring-primary"
                    />
                    <div className="absolute inset-0 rounded-sm group-hover:bg-primary/10 transition-colors opacity-0 group-hover:opacity-100 pointer-events-none"></div>
                  </div>
                  <span className="text-sm group-hover:text-primary transition-colors">
                    Allows Heavy Waste
                  </span>
                </label>

                <label className="flex items-center gap-2 cursor-pointer group">
                  <div className="relative flex items-center">
                    <input
                      type="checkbox"
                      id="onRoad"
                      checked={filterOnRoad}
                      onChange={e => setFilterOnRoad(e.target.checked)}
                      className="rounded-sm w-4 h-4 bg-background border-border text-primary focus:ring-primary"
                    />
                    <div className="absolute inset-0 rounded-sm group-hover:bg-primary/10 transition-colors opacity-0 group-hover:opacity-100 pointer-events-none"></div>
                  </div>
                  <span className="text-sm group-hover:text-primary transition-colors">
                    Road Placement Only
                  </span>
                </label>
              </div>
            </div>

            {/* Reset button */}
            <div className="flex justify-end">
              <button
                onClick={resetFilters}
                className="px-4 py-2 text-sm font-medium text-primary hover:text-primary/80 hover:bg-primary/10 rounded-md transition-colors flex items-center space-x-2"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="14"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
                  <path d="M3 3v5h5" />
                </svg>
                <span>Reset Filters</span>
              </button>
            </div>
          </div>
        </motion.div>

        {/* No results message */}
        {filteredSkips.length === 0 && (
          <motion.div
            className="bg-card border border-border rounded-lg p-6 text-center my-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <svg
              className="w-12 h-12 mx-auto text-muted-foreground mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={1.5}
                d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M12 20h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            <h3 className="text-lg font-semibold mb-2">No Matching Skips</h3>
            <p className="text-muted-foreground mb-4">
              Try adjusting your filters to see more options.
            </p>
            <button
              onClick={resetFilters}
              className="px-4 py-2 bg-primary/10 hover:bg-primary/20 text-primary rounded-md transition-colors"
            >
              Reset Filters
            </button>
          </motion.div>
        )}

        {/* Skip cards grid */}
        <motion.div
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {filteredSkips.map(skip => (
            <div
              key={skip.id}
              className="bg-card rounded-lg shadow-sm border border-border overflow-hidden hover:shadow-md transition-all"
            >
              <SkipCard
                skip={skip}
                isSelected={selectedSkip?.id === skip.id}
                onSelect={() => setSelectedSkip(skip)}
              />
            </div>
          ))}
        </motion.div>

        {/* Footer - Portfolio Link (only show if no skip is selected) */}
        {!selectedSkip && (
          <div className="py-4 text-center text-muted-foreground text-sm">
            <p>
              Design by{' '}
              <a
                href="https://pauldoros.site"
                target="_blank"
                rel="noopener noreferrer"
                className="text-primary hover:text-primary/80"
              >
                Paul Doros
              </a>
            </p>
            <p className="mt-1">
              <Link to="/examples" className="text-primary hover:text-primary/80">
                View UI Examples
              </Link>
            </p>
          </div>
        )}
      </div>

      {/* Proceed button (fixed at bottom) */}
      {selectedSkip && (
        <motion.div
          className="fixed bottom-0 left-0 right-0 bg-background/80 backdrop-blur-sm border-t border-border py-3 md:py-4 z-50"
          initial={{ y: 100 }}
          animate={{ y: 0 }}
          transition={{ type: 'spring', stiffness: 400, damping: 40 }}
        >
          <div className="container mx-auto px-4 flex flex-col sm:flex-row justify-between items-center gap-3">
            <div className="flex flex-col items-center sm:items-start">
              <span className="text-xs sm:text-sm text-muted-foreground">Selected:</span>
              <span className="font-semibold text-foreground text-center sm:text-left">
                {selectedSkip.size} Yard Skip - £
                {Math.round(
                  selectedSkip.price_before_vat +
                    (selectedSkip.price_before_vat * selectedSkip.vat) / 100
                )}
              </span>
            </div>
            <div className="w-full sm:w-auto">
              <GradientButton
                variant="proceed"
                size="sm"
                className="w-full sm:w-auto"
                onClick={handleProceed}
              >
                Proceed to Checkout →
              </GradientButton>
            </div>
          </div>
        </motion.div>
      )}

      {/* Theme toggle */}
      <div className="fixed top-4 right-4 z-50">
        <ThemeToggle />
      </div>

      {/* Chat assistant */}
      <ChatAssistant />
    </div>
  );
}
